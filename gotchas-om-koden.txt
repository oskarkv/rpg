Randomsaker
===========
* Protocol/implementationer blir cacheade, så om man ändrar på dem kan man
  behöva starta om repln.
* Man måste calla (add-logging-wrappers) för att logging ska fungera.

Funderingar
===========
* enqueue-events och enqueue-msgs är båda stateful. Skulle man kunna ha dem i
  game-state i stället?
* Man skulle kunna byta ut update-in mot update på många ställen
* Använd Specter!
* Callar man bara enqueue-msgs i process-event? Borde kanske dokumentera det?
  Nej! Jag har sett andra fall. Men hur funkar det?
* Terrain skickas till spelaren?
* Check-spawns och check-corpses är väldigt lika
* :looting är lite krångligt, hur funkar det egentligen? (Det är vilka som
  lootar, för fler kan göra det samtidigt.)
* Om en spelare disconnectar, hur blir det med looting osv?
* Kanske dokumentera varje net-msg vad det är till för, ibland liiite oklart
* Man kanske skulle skriva en spec för krångliga saker, som t.ex. looting
  (många samtidigt, vad händer på sv/cl när man går ifrån, etc), stacking,
  destroya items, osv.


Servern
=======

game-state består av:
* chars
* player-ids
* corpses
* last-move
* last-regen
* effects
* to-spawn

* terrain
* player-spawn
* spawns

* kvs

Client
======
game-state består av:
* own-id
* last-move
* chars
* corpses
* inv (egna)
* gear (egna)
* spells (egna)

client/core
-----------
event-queue är för events som man ska skicka vartefter till servern.
all-events-queue är för alla events som man ska skicka till grafiken, t.ex.

ccfns
-----

sum-stats räknar fram base-stats, dvs agi str armor osv
update-stats räknar ut max-hp, damage, hp-regen osv
Men det låter inte så på namnen. Ändra, tror jag.

input
-----
Man får input från events, utan att man behöver updatea dem. Sen kör man i
main-loop get-events på input-system.

Checkade
========

server/pathfinding.clj
* server/core.clj
* server/base.clj
* server/spells.clj
* server/mobs_and_looting.clj
* server/movement.clj
server/inventory.clj
server/ai.clj
server/combat.clj
mobs.clj
* networking/protocols.clj
* networking/core.clj
* networking/implementations/kryonet.clj
* constants.clj
* client/hud.clj
* client/core.clj
* client/input.clj
* math.clj
* logging.clj
editor/core.clj
editor/main.clj
editor/editor_functions.clj
editor/gui.clj
editor/input.clj
dungeon_generator.clj
key_value_store/protocols.clj
key_value_store/core.clj
key_value_store/implementations/filesystem_kvs.clj
game_map.clj
utils.clj
java_math.clj
common/core_functions.clj
common/core.clj
common/spells.clj
common/jme_utils.clj
common/stats.clj
* common/graphics.clj
common/items.clj
common/input.clj
